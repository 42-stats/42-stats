text,label
"Very thorough testing and deep understanding of the code. I had some questions that were answered very well, I have no doubt that you dug very deep into the subject.\r\nWell done & good luck with next cpp!",3
"Very good implementation, one thing to consider:\r\nuse try catch blocks to handle function/keyword failures like new, otherwise the exception is left uncaught and you crash:\r\nOtherwise everything looks good and is well understood\r\nGL",4
"We found a new keyword outside of a catch block, leading to uncaught std::bad_allocation in case of failure. Other than that, the code is very well written and understood and exceptions are used in a smart way.\r\nGL!",4
"Unfortunately, we found that memory is not being freed when exiting from the child processes, we had a long discussion about it but after careful consideration we came to the conclusion that rules are rules.\r\nFor reference: All heap allocated memory space must be properly freed when necessary. No leaks\r\nwill be tolerated.\r\nOther than that, this minishell is rock solid, GL next time!",4
"Very robust error handling for btc exchange, I am amazed, I could not find any way to inject your code with infested data\r\nkeep it up and pls pass this we need to lock webserv team\r\n\r\n",2
"I would have given outstanding if you protected your fclose smh\r\nGG see you on next rush",2
"Unfortunately, we found some unprotected functions (strjoin, mlx_xpm_to_image, gnl) that lead to crashes. \r\nThe map is also being opened and playable with 2 exits.\r\nOtherwise the code looks great & leak-free, so should be easy fixes.\r\nGL and hit me up if you need help:)",4
"Very sorry for the delay, we looked at everything and the code looks great! You understand what you are doing & why you are doing it, so it's good for me :))\r\nGood luck with your minishell!",3
"We found a few issues:\r\n- leak in ex00 (delete not being called on x)\r\n- no protection against std::bad_alloc (use try/catch block in main)\r\n- attack with HumanB which has no weapon\r\n- crash when calling the replacer in ex04 with argc < 4\r\nWe found possible fixes for everything, GL with next try!\r\nAnd you will love cpp i promise :))"4
"We found some unprotected mallocs server side (some crash and one prints (null) instead of an error message).\r\nWe also found some uninitialized values which could lead to undefined behavior if unlucky, we went over how to fix it.\r\nOther than that everything looks good & leak free!\r\nGL & hit me up on discord if you need to farm points :)",4
"We found an issue in the Phonebook, due to the index wrapping logic index 0 is getting skipped (put index++ somewhere else). \r\nAlso when you search with empty PhoneBook you get stuck with no way out except ctrl-C/D\r\nOther than that, everything looked great and the classes were well structured.\r\nGL",4
"Unfortuately only P\u00e9ter was here..\r\nWe talked a lot about the code, I am very impressed by the code structure and how the memory handling was implemented, keep it up!!\r\nExcept for the few valgrind errors we went through together, the program was working very well and P\u00e9ter showed a very strong understanding of the logic behind the code & the Makefile.\r\nYou can use this tool in order to check for function protections (not only mallocs, any function that can fail):\r\nhttps://github.com/tmatis/funcheck\r\nJust follow the instructions to install and use the -a flag to check for leaks.\r\nKeep up the good work and good luck with your exam!!\r\n",4
"Very good implementation of backtracking, I am impressed!!\r\nUnfortunately, we found out that the array was not getting freed, which resulted in leaks (used crash flag because leaks is missing)\r\nThe algo was well understood and the code looks very clean!\r\n\r\naliases:\r\nvim ~/zshrc\r\nalias cca=\cc -Wall -Wextra -Werror\\r\n\r\ntest main:\r\n#include <stdio.h>\r\n#include <stdlib.h> // malloc/free lib\r\n\r\nint\tmain(int ac, char **av)\r\n{\r\n\t(void)ac;\r\n\t(void)av;\r\n\tint\t*input;\r\n\tint i = 0;\r\n\r\n\tinput = malloc(16 * sizeof(int)); // allocate n * sizeof(<datatype>)\r\n\twhile (i < 16)\r\n\t{\r\n\t\tinput[i] = i;\r\n\t\ti++;\r\n\t}\r\n\twhile (i >= 0)\r\n\t{\r\n\t\tprintf(\%d\\n\, input[i]);\r\n\t\ti--;\r\n\t}\r\n\tfree(input); // free it once you don't need it anymore\r\n\treturn (0);\r\n}",4
"We found an infinite loop in get_next_line, was in the bonus so I guess does not count for 'crash' flag :)\r\nIt was due to the stopping condition never being met in the reading loop (strchr was always returning NULL, thus keeping the condition true)\r\nOther than that, my only tip would be to keep error messages on one line per cmd table\r\nSorry for the 1 hour lost on those fds lol\r\nGL with minishell!",3
"There was some start of an implementation for the error handling, we talked about that and I proposed some improvements.\r\nThe group was very friendly, we talked a lot about algorithms, recursion, memory, etc\r\n\r\nexample of a dynamic memory allocation situation: (you want to duplicate argv[1] and do not know how big it will be)\r\n#include <stdlib.h> // lib for malloc & free\r\n#include <string.h> // lib for strlen\r\n\r\nint main(int argc, char **argv)\r\n{\r\n\tunsigned int size = strlen(argv[1]); // get the size in order to know how much memory you need\r\n\tchar *str = malloc(size * sizeof(char)); // allocate size * <size of the data type>  (char = 1, int = 4, etc - use sizeof(<data type>) to get the size if you don't know it)\r\n\tfree(str); // free the memory once you do not need it anymore!! otherwise leaks and we don't like leaks\r\n}\r\nGood luck with the rest of the piscine!",4
"We found a small leak in ft_split:\r\nvoid\tfree_all(char **new, int w)\r\n{\r\n\twhile (w > 0)\r\n\t\tfree(new[w--]);\r\n},\r\nthis skips index 0 while freeing the array (fix: change > to >=).\r\nWe also found a weird issue with big negative numbers not being sorted, we identified that it starts happening once the biggest difference between values is > INT_MAX, it seems to break the insertion logic.\r\nAlso, 01 is a valid number in C, no need to throw an error on that.\r\nOtherwise, the code looks good and works well, did not find any issues besides the ones above, and the algorithm is well understood & explained.\r\nGood luck with fixing!",4
"good job :)",0
"great job !",0
"good job, lets see what moulinette says:)",0
":))))))",0
"ex01: fill rest up with \\0\r\nex06: printable chars start from 32\r\nex10: handle zero size input, change k to unsigned int\r\ngreat job:)",3
"i hope 6 passes, if not include spaces:) otherwise great job!",1
"great job, issue on nr09 with decapitalization on last letter of word, everyting looks great otherwise :)",2
"7 does not compile unfortunately, otherwise great job!",1
"change if to while on second loop in ex03, also write your own isspace and isdigt functions.",2
"good job, check with original functions to make sure you have the right output. good luck:)",2
"sehr sch\u00f6ne codes ich gratuliere",0
"Great job!",0
"You suck",0
"I hate evaluating you",0
"not very interesting",0
